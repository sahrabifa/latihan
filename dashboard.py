# -*- coding: utf-8 -*-
"""Copy of Tugas Akhir.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iuLlZYWW_QI8b-MlXpNVlMp5X6Z_x_wE

# Proyek Analisis Data: Bike Sharing Dataset
- Nama: Sahra Bilqis Fauziyyah
- Email: sabifa0251@gmail.com
- Id Dicoding: Sahra Bilqis Fauziyyah

## Menentukan Pertanyaan Bisnis

- pertanyaan 1
1. Bagaimana pengaruh kondisi cuaca terhadap penggunaan sepeda?
- pertanyaan 2
2. Bagaimana pola penggunaan sepeda berubah sepanjang musim? Apakah ada perbedaan signifikan dalam jumlah penggunaan sepeda antara musim tertentu?

## Menyaipkan semua library yang dibuthkan
"""

pip install pipreqsnb

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

#membaca data hour.csv
df_hour = pd.read_csv('hour.csv')
df_hour

#membaca data day.csv
df_day = pd.read_csv('day.csv')
df_day

"""### Assessing Data"""

#memeriksa tipe data data dari tiap kolom yang terdapat dalam df_hour
df_hour.info()

#memeriksa tipe data data dari tiap kolom yang terdapat dalam df_day
df_day.info()

#Untuk mengetahui adakah missing value pada tabel
df_hour.isna().sum()

#tidak ada missing value

#Untuk mengetahui adakah data duplikat pada tabel
print("Jumlah duplikasi: ", df_day.duplicated().sum())

#tidak ada data duplikat

#memeriksa parameter statistik dari kolom numerik yang terdapat dalam df_hour
df_hour.describe()

#memeriksa parameter statistik dari kolom numerik yang terdapat dalam df_day
df_day.describe()

"""### Cleaning Data"""

#mengubah tipe data pada kolom 'dteday' menjadi datetime
df_hour['dteday'] = pd.to_datetime(df_hour['dteday'], format='%Y-%m-%d')

#memeriksa tipe data data dari tiap kolom yang terdapat dalam df_hour
df_hour.info()

#mengubah tipe data pada kolom 'dteday' menjadi datetime
df_day['dteday'] = pd.to_datetime(df_day['dteday'], format='%Y-%m-%d')

#memeriksa tipe data data dari tiap kolom yang terdapat dalam df_day
df_day.info()

"""## Exploratory Data Analysis (EDA)

### Explore ...
"""

#melihat rangkuman parameter statistik dari data df_hour
df_hour.describe(include="all")

# Filter data untuk tahun 2011-2012
data_2011 = df_hour[df_hour['dteday'].dt.year == 2011]
data_2012 = df_hour[df_hour['dteday'].dt.year == 2012]

# Menghitung jumlah penyewa berdasarkan Tahun
total_cnt_by_weathersit = df_hour.groupby('yr')['cnt'].sum().reset_index()

# Mengurutkan DataFrame berdasarkan jumlah penyewa secara descending
sorted_total_cnt = total_cnt_by_weathersit.sort_values(by='cnt', ascending=False)

# Menampilkan hasil
print("\nTotal jumlah penyewa berdasarkan Tahun\n")
for index, row in sorted_total_cnt.iterrows():
    print(f"Tahun {row['yr']:2d}: Jumlah Penyewa = {row['cnt']}")

# Menghitung jumlah penyewa berdasarkan jam
total_cnt_by_hour = df_hour.groupby('hr')['cnt'].sum().reset_index()

# Menghitung jumlah penyewa berdasarkan jam
total_cnt_by_hour2011 = data_2011.groupby('hr')['cnt'].sum().reset_index()
total_cnt_by_hour2012 = data_2012.groupby('hr')['cnt'].sum().reset_index()

# Mengurutkan DataFrame berdasarkan jumlah penyewa secara descending
sorted_total_cnt = total_cnt_by_hour.sort_values(by='cnt', ascending=False)
sorted_total_cnt2011 = total_cnt_by_hour2011.sort_values(by='cnt', ascending=False)
sorted_total_cnt2012 = total_cnt_by_hour2012.sort_values(by='cnt', ascending=False)

# Menampilkan hasil
print("\nTotal jumlah penyewa berdasarkan Jam selama 2 tahun\n")
for index, row in sorted_total_cnt.iterrows():
    print(f"Jam {row['hr']:2d}: Jumlah Penyewa = {row['cnt']}")

print("\nTotal jumlah penyewa berdasarkan Jam pada tahun 2011\n")
for index, row in sorted_total_cnt2011.iterrows():
    print(f"Jam {row['hr']:2d}: Jumlah Penyewa = {row['cnt']}")

print("\n\nTotal jumlah penyewa berdasarkan Jam pada tahun 2012\n")
for index, row in sorted_total_cnt2012.iterrows():
    print(f"Jam {row['hr']:2d}: Jumlah Penyewa = {row['cnt']}")

# Menghitung jumlah penyewa berdasarkan Bulan
total_cnt_by_mnth = df_hour.groupby('mnth')['cnt'].sum().reset_index()

# Menghitung jumlah penyewa berdasarkan Bulan
total_cnt_by_mnth2011 = data_2011.groupby('mnth')['cnt'].sum().reset_index()
total_cnt_by_mnth2012 = data_2012.groupby('mnth')['cnt'].sum().reset_index()

# Mengurutkan DataFrame berdasarkan jumlah penyewa secara descending
sorted_total_cnt = total_cnt_by_mnth.sort_values(by='cnt', ascending=False)
sorted_total_cnt2011 = total_cnt_by_mnth2011.sort_values(by='cnt', ascending=False)
sorted_total_cnt2012 = total_cnt_by_mnth2012.sort_values(by='cnt', ascending=False)

# Menampilkan hasil
print("\nTotal jumlah penyewa berdasarkan Bulan selama 2 tahun\n")
for index, row in sorted_total_cnt.iterrows():
    print(f"Bulan {row['mnth']:2d}: Jumlah Penyewa = {row['cnt']}")

print("\nTotal jumlah penyewa berdasarkan Bulan pada tahun 2011\n")
for index, row in sorted_total_cnt2011.iterrows():
    print(f"Bulan {row['mnth']:2d}: Jumlah Penyewa = {row['cnt']}")

print("\n\nTotal jumlah penyewa berdasarkan Bulan pada tahun 2012\n")
for index, row in sorted_total_cnt2012.iterrows():
    print(f"Bulan {row['mnth']:2d}: Jumlah Penyewa = {row['cnt']}")

# Menghitung jumlah penyewa berdasarkan Cuaca
total_cnt_by_weathersit = df_hour.groupby('weathersit')['cnt'].sum().reset_index()

# Menghitung jumlah penyewa berdasarkan Cuaca
sorted_total_cnt = total_cnt_by_weathersit.sort_values(by='cnt', ascending=False)
total_cnt_by_weather2011 = data_2011.groupby('weathersit')['cnt'].sum().reset_index()
total_cnt_by_weather2012 = data_2012.groupby('weathersit')['cnt'].sum().reset_index()

# Mengurutkan DataFrame berdasarkan jumlah penyewa secara descending
sorted_total_cnt2011 = total_cnt_by_weather2011.sort_values(by='cnt', ascending=False)
sorted_total_cnt2012 = total_cnt_by_weather2012.sort_values(by='cnt', ascending=False)

# Menampilkan hasil
print("\nTotal jumlah penyewa berdasarkan Cuaca selama 2 tahun\n")
for index, row in sorted_total_cnt.iterrows():
    print(f"Cuaca {row['weathersit']:2d}: Jumlah Penyewa = {row['cnt']}")

print("\nTotal jumlah penyewa berdasarkan Cuaca pada tahun 2011\n")
for index, row in sorted_total_cnt2011.iterrows():
    print(f"Cuaca {row['weathersit']:2d}: Jumlah Penyewa = {row['cnt']}")

print("\nTotal jumlah penyewa berdasarkan Cuaca pada tahun 2012\n")
for index, row in sorted_total_cnt2012.iterrows():
    print(f"Cuaca {row['weathersit']:2d}: Jumlah Penyewa = {row['cnt']}")

# Menghitung jumlah penyewa berdasarkan Musim
total_cnt_by_season = df_hour.groupby('season')['cnt'].sum().reset_index()

# Menghitung jumlah penyewa berdasarkan musim
sorted_total_cnt = total_cnt_by_season.sort_values(by='cnt', ascending=False)
total_cnt_by_season2011 = data_2011.groupby('season')['cnt'].sum().reset_index()
total_cnt_by_season2012 = data_2012.groupby('season')['cnt'].sum().reset_index()

# Mengurutkan DataFrame berdasarkan jumlah penyewa secara descending
sorted_total_cnt2011 = total_cnt_by_season2011.sort_values(by='cnt', ascending=False)
sorted_total_cnt2012 = total_cnt_by_season2012.sort_values(by='cnt', ascending=False)

# Menampilkan hasil
print("\nTotal jumlah penyewa berdasarkan Musim selama 2 tahun\n")
for index, row in sorted_total_cnt.iterrows():
    print(f"Musim {row['season']:2d}: Jumlah Penyewa = {row['cnt']}")

print("\nTotal jumlah penyewa berdasarkan Musim pada tahun 2011\n")
for index, row in sorted_total_cnt2011.iterrows():
    print(f"Musim {row['season']:2d}: Jumlah Penyewa = {row['cnt']}")

print("\nTotal jumlah penyewa berdasarkan Musim pada tahun 2012\n")
for index, row in sorted_total_cnt2012.iterrows():
    print(f"Musim {row['season']:2d}: Jumlah Penyewa = {row['cnt']}")

# Mengelompokkan data frame 'df_hour' berdasarkan kolom "yr" dan menghitung jumlah nilai unik dari kolom "instant" untuk setiap grup.
# Kemudian hasilnya diurutkan secara menurun.

df_hour.groupby(by="yr").instant.nunique().sort_values(ascending=False)

"""## Visualization & Explanatory Analysis

### Pertanyaan 1:
"""

# Visualisasi untuk membandingkan penggunaan sepeda pada berbagai kondisi cuaca
sns.boxplot(x='weathersit', y='cnt', data=df_hour)
plt.xlabel('Kondisi Cuaca')
plt.ylabel('Jumlah Sepeda Tersewa')
plt.title('Perbandingan Penggunaan Sepeda pada Berbagai Kondisi Cuaca')
plt.show()

# Menghitung IQR untuk setiap kondisi cuaca
def remove_outliers_by_weather(data):
    cleaned_data = pd.DataFrame()
    for weather_condition in data['weathersit'].unique():
        subset = data[data['weathersit'] == weather_condition]
        Q1 = subset['cnt'].quantile(0.25)
        Q3 = subset['cnt'].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        cleaned_data = pd.concat([cleaned_data, subset[(subset['cnt'] >= lower_bound) & (subset['cnt'] <= upper_bound)]])
    return cleaned_data

# Menghapus outlier berdasarkan kondisi cuaca
bike_data_no_outliers = remove_outliers_by_weather(df_hour)

# Visualisasi tanpa outlier
sns.boxplot(x='weathersit', y='cnt', data=bike_data_no_outliers)
plt.xlabel('Kondisi Cuaca')
plt.ylabel('Jumlah Sepeda Tersewa')
plt.title('Perbandingan Penggunaan Sepeda pada Berbagai Kondisi Cuaca (Tanpa Outlier)')
plt.show()

"""### Pertanyaan 2:"""

# Menyusun data untuk setiap musim
spring_data = df_hour[df_hour['season'] == 1]
summer_data = df_hour[df_hour['season'] == 2]
fall_data = df_hour[df_hour['season'] == 3]
winter_data = df_hour[df_hour['season'] == 4]

# Menggunakan line chart untuk melihat perubahan penggunaan sepeda sepanjang musim
plt.figure(figsize=(10, 5))
sns.lineplot(x='mnth', y='cnt', data=spring_data, label='Spring', marker='o')
sns.lineplot(x='mnth', y='cnt', data=summer_data, label='Summer', marker='o')
sns.lineplot(x='mnth', y='cnt', data=fall_data, label='Fall', marker='o')
sns.lineplot(x='mnth', y='cnt', data=winter_data, label='Winter', marker='o')

plt.xticks(range(1, 13))
plt.xlabel('Bulan')
plt.ylabel('Jumlah Sepeda Tersewa')
plt.title('Perubahan Penggunaan Sepeda Sepanjang Musim')
plt.legend(title='Musim', loc='upper left')
plt.show()

"""## Conclusion

- Conclution pertanyaan 1
1. Berdasarkan analisis data, terlihat bahwa penggunaan sepeda cenderung lebih tinggi pada kondisi cuaca yang cerah dan sedikit awan selama dua tahun berturut-turut (2011-2012) dengan total yaitu cuaca cerah sebanyak 2338173 penyewa dan cuaca berawan sebanyak 795952 penyewa.
- conclution pertanyaan 2
2. Dari visualisasi perubahan penggunaan sepeda sepanjang musim, terlihat pola peningkatan penggunaan sepeda selama musim semi sampai musim panas (dari Desember sampai Juni) dan penurunan selama musim dingin (dari bulan September sampai Desember). Jumlah penyewa pada musim gugur lebih banyak dibandingkan musim lainnya selama dua tahun berturut-turut (2011-2012) yaitu sebanyak 1061129 penyewa

- Saran
3. Analisis ini dapat memberikan wawasan bagi penyelenggara layanan sepeda untuk mengoptimalkan penempatan sepeda atau meningkatkan promosi pada kondisi cuaca tertentu.
Data ini dapat digunakan untuk menyusun strategi pemasaran yang lebih efektif, terutama dalam hal promosi berdasarkan musim atau kondisi cuaca.
"""

df_hour.to_csv("all_data.csv", index=False)

